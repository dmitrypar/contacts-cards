{"version":3,"sources":["Components/ModalInfo.js","App/App.js","API/api.js","App/AppContainer.js","actions/index.js","actions/types.js","Components/paginator.js","serviceWorker.js","reducer.js","index.js"],"names":["ModalInfo","isOpen","onClose","loadedCurrentUserData","editUserDataSender","deleteButtonHandler","newUserId","email","avatar","first_name","last_name","id","useState","firstNameChanged","setfirstNameChanged","lastNameChanged","setLastNameChanged","emailChanged","setEmailChanged","avatarLink","setAvatarLink","ReactDom","createPortal","className","tabIndex","onClick","src","alt","role","aria-label","type","defaultValue","onChange","e","target","value","document","getElementById","App","selectedPageNumber","loadedUsersList","pages","onPageSelectedHandler","onUserButtonClick","isModalOpen","setIsModalOpen","onNewUserBtnClick","map","cart","key","p","getAPI","baseURL","endSlashURL","getUsersListAPI","selectedPage","fetch","this","getCurrentUserInfo","editCurrentUserData","currentUserId","selectMethod","editedUserData","param","method","body","JSON","stringify","headers","deleteCurrentUser","connect","data","currentUser","loadedData","isloadingData","userPerPageCount","totalPagesCount","totalUsersCount","currentUserData","setData","payload","onPageSelected","pageNumber","loadCurrentUser","cleanUserData","isLoading","setisLoading","setselectedPage","setSelectMethod","setCurrentUserId","useEffect","then","res","json","pagesArr","PageCount","i","push","paginator","catch","err","console","log","text","Boolean","window","location","hostname","match","initionalDataState","initionalCurrentUserState","isloadingUserData","RootReducer","combineReducers","state","page","per_page","total","total_pages","store","createStore","composeWithDevTools","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.b594ae5f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport ReactDom from \"react-dom\";\r\n\r\nconst ModalInfo = ({\r\n  isOpen,\r\n  onClose,\r\n  loadedCurrentUserData,\r\n  editUserDataSender,\r\n  deleteButtonHandler,\r\n  newUserId,\r\n}) => {\r\n  const { email, avatar, first_name, last_name, id } = loadedCurrentUserData;\r\n  const [firstNameChanged, setfirstNameChanged] = useState(first_name);\r\n  const [lastNameChanged, setLastNameChanged] = useState(last_name);\r\n  const [emailChanged, setEmailChanged] = useState(email);\r\n  const [avatarLink, setAvatarLink] = useState(avatar);\r\n\r\n  const saveButtonHandler = () => {\r\n    editUserDataSender(\r\n      { firstNameChanged, lastNameChanged, emailChanged, avatarLink },\r\n      id\r\n    );\r\n  };\r\n  if (!isOpen) return null;\r\n  return ReactDom.createPortal(\r\n    <>\r\n      <div className=\"modalSkin\" />\r\n      <div className=\"modalContainer\" tabIndex=\"1\">\r\n        <div className=\"modalWraper\">\r\n          <div className=\"modalTop\">\r\n            <div className=\"closeBtn\">\r\n              <button onClick={onClose}>\r\n                <div className=\"xrest\">&#10006;</div>\r\n              </button>\r\n            </div>\r\n            <div className=\"modalContent\">\r\n              <form className=\"modalContentGroupe\">\r\n                <div className=\"modalAvatar\">\r\n                  {id !== newUserId ? (\r\n                    <img src={avatar} alt=\"avatar\" />\r\n                  ) : (\r\n                    <div className=\"yourAvatar\">\r\n                      <span role=\"img\" aria-label=\"smile\">\r\n                        &#128578;\r\n                      </span>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n                <div className=\"modalInput\">\r\n                  <div className=\"avatar input\">\r\n                    <input\r\n                      type=\"text\"\r\n                      defaultValue={avatar}\r\n                      onChange={(e) => {\r\n                        setAvatarLink(e.target.value);\r\n                      }}\r\n                    />\r\n                    <span className=\"labelInput\">avatar link</span>\r\n                  </div>\r\n                  <div className=\"firstName input\">\r\n                    <input\r\n                      type=\"text\"\r\n                      defaultValue={first_name}\r\n                      onChange={(e) => {\r\n                        setfirstNameChanged(e.target.value);\r\n                      }}\r\n                    />\r\n                    <span className=\"labelInput\">first name</span>\r\n                  </div>\r\n                  <div className=\"lastName input\">\r\n                    <input\r\n                      type=\"text\"\r\n                      defaultValue={last_name}\r\n                      onChange={(e) => {\r\n                        setLastNameChanged(e.target.value);\r\n                      }}\r\n                    />\r\n                    <span className=\"labelInput\">last name</span>\r\n                  </div>\r\n                  <div className=\"email input\">\r\n                    <input\r\n                      type=\"text\"\r\n                      defaultValue={email}\r\n                      onChange={(e) => {\r\n                        setEmailChanged(e.target.value);\r\n                      }}\r\n                    />\r\n                    <span className=\"labelInput\">email</span>\r\n                  </div>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          </div>\r\n          <div className=\"modalButtons\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-outline-secondary\"\r\n              onClick={() => deleteButtonHandler(id)}\r\n            >\r\n              Удалить\r\n            </button>\r\n            <button\r\n              type=\"submit\"\r\n              className=\"btn btn-outline-primary\"\r\n              onClick={() => saveButtonHandler(id)}\r\n            >\r\n              Сохранить\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>,\r\n    document.getElementById(\"portal\")\r\n  );\r\n};\r\n\r\nexport default ModalInfo;\r\n","import React from \"react\";\nimport \"./../sass/style.scss\";\nimport ModalInfo from \"../Components/ModalInfo\";\n\nfunction App({\n  selectedPageNumber,\n  loadedUsersList,\n  pages,\n  onPageSelectedHandler,\n  onUserButtonClick,\n  isModalOpen,\n  setIsModalOpen,\n  loadedCurrentUserData,\n  editUserDataSender,\n  deleteButtonHandler,\n  onNewUserBtnClick,\n}) {\n  const newUserId = 9999;\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"row\">\n          {loadedUsersList.map((cart) => {\n            return (\n              <div\n                className=\"col-md-4 col-sm-6 col-xs-12 loadedcarts \"\n                key={cart.email}\n              >\n                <button\n                  type=\"button\"\n                  className=\"btn\"\n                  onClick={() => onUserButtonClick(cart.id)}\n                >\n                  <img src={cart.avatar} alt=\"avatar\" />\n                </button>\n                {loadedCurrentUserData.id === cart.id ||\n                loadedCurrentUserData.id === newUserId ? (\n                  <ModalInfo\n                    loadedCurrentUserData={loadedCurrentUserData}\n                    isOpen={isModalOpen}\n                    editUserDataSender={editUserDataSender}\n                    deleteButtonHandler={deleteButtonHandler}\n                    newUserId={newUserId}\n                    onClose={() => setIsModalOpen(false)}\n                  >\n                    NewModal\n                  </ModalInfo>\n                ) : (\n                  \"\"\n                )}\n              </div>\n            );\n          })}\n        </div>\n        <div className=\"row\">\n          <div className=\"col fornewcart\">\n            <button\n              type=\"button\"\n              className=\"btn btn-primary addUserBtn\"\n              onClick={onNewUserBtnClick}\n            >\n              <span className=\"plus\" role=\"img\" aria-label=\"plus\">\n                &#43;\n              </span>\n            </button>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col paginator\">\n            {pages.map((p) => {\n              return (\n                <span\n                  key={p}\n                  onClick={() => onPageSelectedHandler(p)}\n                  className={p === selectedPageNumber ? \"selectedPage\" : \"\"}\n                >\n                  {p}\n                </span>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","export const getAPI = {\r\n  baseURL: \"https://reqres.in/api/users\",\r\n  endSlashURL: \"/\",\r\n\r\n  getUsersListAPI(selectedPage) {\r\n    const endPageURL = \"?page=\";\r\n    return fetch(this.baseURL + endPageURL + selectedPage);\r\n  },\r\n\r\n  getCurrentUserInfo(id) {\r\n    return fetch(this.baseURL + this.endSlashURL + id);\r\n  },\r\n\r\n  editCurrentUserData(currentUserId, selectMethod, editedUserData) {\r\n    const param = {\r\n      method: selectMethod,\r\n      body: JSON.stringify(editedUserData),\r\n      headers: { \"Content-type\": \"application/json; charset=UTF-8\" },\r\n    };\r\n    return fetch(this.baseURL + this.endSlashURL + currentUserId, param);\r\n  },\r\n\r\n  deleteCurrentUser(id) {\r\n    const param = {\r\n      method: \"DELETE\",\r\n      headers: { \"Content-type\": \"application/json; charset=UTF-8\" },\r\n    };\r\n    return fetch(this.baseURL + this.endSlashURL + id, param);\r\n  },\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  setData,\r\n  onPageSelected,\r\n  loadCurrentUser,\r\n  cleanUserData,\r\n} from \"./../actions/index\";\r\nimport App from \"./App\";\r\nimport { getAPI } from \"./../API/api\";\r\nimport { paginator } from \"../Components/paginator\";\r\n\r\nconst AppContainer = ({\r\n  isloadingData,\r\n  loadedUsersList,\r\n  setData,\r\n  totalUsersCount,\r\n  userPerPageCount,\r\n  selectedPageNumber,\r\n  onPageSelected,\r\n  loadCurrentUser,\r\n  loadedCurrentUserData,\r\n  cleanUserData,\r\n}) => {\r\n  const [isLoading, setisLoading] = useState(false);\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [selectedPage, setselectedPage] = useState(selectedPageNumber);\r\n  const [selectMethod, setSelectMethod] = useState(\"PUT\");\r\n  const [currentUserId, setCurrentUserId] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    if (!isloadingData) {\r\n      return;\r\n    }\r\n    setisLoading(true);\r\n    getAPI\r\n      .getUsersListAPI(selectedPage)\r\n      .then((res) => {\r\n        return res.json();\r\n      })\r\n      .then((res) => {\r\n        setData(res);\r\n      });\r\n  }, [isLoading, isloadingData, setData, selectedPage]);\r\n\r\n  // set selected page\r\n  const onPageSelectedHandler = (id) => {\r\n    onPageSelected(id);\r\n    setselectedPage(id);\r\n  };\r\n\r\n  // cretate Arr for pagination\r\n  const pages = paginator(totalUsersCount, userPerPageCount);\r\n\r\n  const onUserButtonClick = (id) => {\r\n    setIsModalOpen(true);\r\n    setCurrentUserId(id);\r\n    setSelectMethod(\"PUT\");\r\n\r\n    getAPI\r\n      .getCurrentUserInfo(id)\r\n      .then((res) => {\r\n        return res.json();\r\n      })\r\n      .then((res) => {\r\n        loadCurrentUser(res);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  const editUserDataSender = (\r\n    { firstNameChanged, lastNameChanged, emailChanged, avatarLink },\r\n    id\r\n  ) => {\r\n    const editedUserData = {\r\n      first_name: firstNameChanged,\r\n      last_name: lastNameChanged,\r\n      email: emailChanged,\r\n      avatar: avatarLink,\r\n    };\r\n    getAPI\r\n      .editCurrentUserData(currentUserId, selectMethod, editedUserData)\r\n      .then((res) => {\r\n        return res.json();\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  const deleteButtonHandler = (id) => {\r\n    console.log(\"delete\", loadedUsersList.first_name);\r\n    getAPI\r\n      .deleteCurrentUser(id)\r\n      .then((res) => {\r\n        return res.text();\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  const onNewUserBtnClick = () => {\r\n    setSelectMethod(\"POST\");\r\n    setCurrentUserId(\"\");\r\n    setIsModalOpen(true);\r\n    cleanUserData();\r\n  };\r\n\r\n  return (\r\n    <App\r\n      selectedPageNumber={selectedPageNumber}\r\n      loadedUsersList={loadedUsersList}\r\n      pages={pages}\r\n      onPageSelectedHandler={onPageSelectedHandler}\r\n      onUserButtonClick={onUserButtonClick}\r\n      isModalOpen={isModalOpen}\r\n      setIsModalOpen={setIsModalOpen}\r\n      loadedCurrentUserData={loadedCurrentUserData}\r\n      editUserDataSender={editUserDataSender}\r\n      deleteButtonHandler={deleteButtonHandler}\r\n      onNewUserBtnClick={onNewUserBtnClick}\r\n    />\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ data, currentUser }) => ({\r\n  loadedUsersList: data.loadedData,\r\n  isloadingData: data.isloadingData,\r\n  userPerPageCount: data.userPerPageCount,\r\n  totalPagesCount: data.totalPagesCount,\r\n  totalUsersCount: data.totalUsersCount,\r\n  selectedPageNumber: data.selectedPageNumber,\r\n  loadedCurrentUserData: currentUser.currentUserData,\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n  setData,\r\n  onPageSelected,\r\n  loadCurrentUser,\r\n  cleanUserData,\r\n})(AppContainer);\r\n","import * as actionTypes from \"../actions/types\";\r\n\r\n// set users list\r\nexport const setData = (data) => {\r\n  return {\r\n    type: actionTypes.SET_DATA_LIST,\r\n    payload: {\r\n      loadedData: data,\r\n    },\r\n  };\r\n};\r\n\r\n// select page\r\nexport const onPageSelected = (id) => {\r\n  return {\r\n    type: actionTypes.SET_PAGE_NUMBER,\r\n    payload: {\r\n      pageNumber: id,\r\n    },\r\n  };\r\n};\r\n\r\n// load data current user\r\nexport const loadCurrentUser = (data) => {\r\n  return {\r\n    type: actionTypes.LOAD_USER,\r\n    payload: {\r\n      currentUserData: data,\r\n    },\r\n  };\r\n};\r\n\r\n// clean data current user\r\nexport const cleanUserData = () => {\r\n  return {\r\n    type: actionTypes.CLEAN_USER,\r\n  };\r\n};\r\n","\r\n// set users list\r\nexport const SET_DATA_LIST = 'SET_DATA_LIST'\r\n\r\n// select page\r\nexport const SET_PAGE_NUMBER = 'SET_PAGE_NUMBER'\r\n\r\n// set current user\r\nexport const LOAD_USER = 'LOAD_USER'\r\n\r\n//clean current user data\r\nexport const CLEAN_USER = 'CLEAN_USER'\r\n","export const paginator = (totalUsersCount, userPerPageCount) => {\r\n  const pagesArr = [];\r\n  const PageCount = totalUsersCount / userPerPageCount;\r\n  for (let i = 1; i < PageCount + 1; i++) {\r\n    // or i < totalPagesCount + 1\r\n    pagesArr.push(i);\r\n  }\r\n  return pagesArr;\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actionTypes from \"./actions/types\";\r\nimport { combineReducers } from \"redux\";\r\n\r\nconst initionalDataState = {\r\n  loadedData: [],\r\n  userPerPageCount: \"\",\r\n  totalUsersCount: \"\",\r\n  totalPagesCount: \"\",\r\n  selectedPageNumber: 1,\r\n  isloadingData: true,\r\n};\r\n\r\n// data for loading user list and pagination\r\nconst data_reducer = (state = initionalDataState, { payload, type }) => {\r\n  // start with (state = initionalDataState, action)\r\n  switch (type) {\r\n    case actionTypes.SET_DATA_LIST:\r\n      return {\r\n        ...state,\r\n        loadedData: payload.loadedData.data,\r\n        isloadingData: false,\r\n        selectedPageNumber: payload.loadedData.page,\r\n        userPerPageCount: payload.loadedData.per_page,\r\n        totalUsersCount: payload.loadedData.total,\r\n        totalPagesCount: payload.loadedData.total_pages,\r\n      };\r\n\r\n    case actionTypes.SET_PAGE_NUMBER:\r\n      return {\r\n        ...state,\r\n        isloadingData: true,\r\n        selectedPageNumber: payload.pageNumber,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initionalCurrentUserState = {\r\n  currentUserData: {},\r\n  isloadingUserData: true,\r\n};\r\n\r\n// data corresponse current user loading on user-button click and clean data if newuser-button was chosed\r\nconst user_reducer = (state = initionalCurrentUserState, { payload, type }) => {\r\n  switch (type) {\r\n    case actionTypes.LOAD_USER:\r\n      return {\r\n        ...state,\r\n        currentUserData: payload.currentUserData.data,\r\n        isloadingUserData: false,\r\n      };\r\n\r\n    case actionTypes.CLEAN_USER:\r\n      return {\r\n        ...state,\r\n        currentUserData: {\r\n          avatar: \"\",\r\n          email: \"\",\r\n          first_name: \"\",\r\n          id: 9999,\r\n          last_name: \"\",\r\n        },\r\n        isloadingUserData: false,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst RootReducer = combineReducers({\r\n  data: data_reducer,\r\n  currentUser: user_reducer,\r\n});\r\n\r\nexport default RootReducer;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport AppContainer from './App/AppContainer';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport RootReducer from './reducer'\n\nconst store = createStore(RootReducer, composeWithDevTools());\n\nReactDOM.render(\n <Provider store={store}>\n  <AppContainer />\n </Provider>,\n  \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}